name: Auto Version Bump

on:
  schedule:
    - cron: '0 0 * * *'  # Runs once every day at midnight UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        id: outdated_check
        run: |
          OUTDATED=$(npm outdated || true)
          if [ -z "$OUTDATED" ]; then
            echo "No outdated packages found."
            echo "outdated=false" >> $GITHUB_OUTPUT
          else
            echo "Outdated packages detected:"
            echo "$OUTDATED"
            echo "outdated=true" >> $GITHUB_OUTPUT
          fi

      - name: Update packages if outdated
        if: steps.outdated_check.outputs.outdated == 'true'
        run: npm update

      - name: Check if files changed after npm update
        if: steps.outdated_check.outputs.outdated == 'true'
        id: changed_check
        run: |
          if git diff --quiet; then
            echo "No changes after npm update. Exiting..."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected after npm update."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump Version
        if: steps.outdated_check.outputs.outdated == 'true' && steps.changed_check.outputs.changed == 'true'
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          FULL_VERSION=$(jq -r .version package.json)
          # Strip off any suffix after '-' to get the base version
          BASE_VERSION=$(echo "$FULL_VERSION" | cut -d '-' -f1)

          NEW_VERSION="${BASE_VERSION}-${TIMESTAMP}"

          # Update package.json with new version
          jq ".version = \"${NEW_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json

          # Update lockfile with new version
          npm install

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Commit changes
        if: steps.outdated_check.outputs.outdated == 'true' && steps.changed_check.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${NEW_VERSION}"

      - name: Push changes
        if: steps.outdated_check.outputs.outdated == 'true' && steps.changed_check.outputs.changed == 'true'
        run: git push origin HEAD:main

      - name: Create and push tag
        if: steps.outdated_check.outputs.outdated == 'true' && steps.changed_check.outputs.changed == 'true'
        run: |
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

