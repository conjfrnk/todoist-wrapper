name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code (with all tags)
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # important so we have access to all tags

      - name: Install GitHub CLI (if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Find unbuilt tags
        id: find_unbuilt
        run: |
          # 1) Gather all v* tags in descending order
          ALL_TAGS=$(git tag --list 'v*' | sort -r)

          # 2) Build an array of "unbuilt" tags (no existing release)
          UNBUILT_TAGS=()
          for TAG in $ALL_TAGS; do
            # Check if a release exists for this tag
            RELEASE_EXISTS=$(gh release view "$TAG" --json url --jq .url 2>/dev/null || true)
            if [ -z "$RELEASE_EXISTS" ]; then
              UNBUILT_TAGS+=("$TAG")
            fi
          done

          # 3) If array is empty, we have no unbuilt tags
          if [ ${#UNBUILT_TAGS[@]} -eq 0 ]; then
            echo "No unbuilt tags found."
            # Even if empty, we can safely output an empty JSON array
            echo "unbuilt-tags=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Unbuilt tags found: ${UNBUILT_TAGS[*]}"

          # 4) Convert Bash array -> JSON array (using jq)
          #    Example output: ["v3.0.0","v2.4.2","v2.0.0"]
          JSON_TAGS=$(printf '%s\n' "${UNBUILT_TAGS[@]}" | jq -R . | jq -s .)

          # 5) Store JSON array in an output variable
          echo "unbuilt-tags=$JSON_TAGS" >> $GITHUB_OUTPUT

      - name: Build and release each unbuilt tag
        if: ${{ steps.find_unbuilt.outputs.unbuilt-tags != '[]' }}
        run: |
          # 1) Extract JSON array from the previous stepâ€™s output
          JSON_TAGS='${{ steps.find_unbuilt.outputs.unbuilt-tags }}'

          # 2) Parse JSON array into lines (one tag per line)
          #    e.g. if JSON_TAGS=["v3.0.0","v2.4.2"]
          #    then TAG_LIST = 
          #         v3.0.0
          #         v2.4.2
          TAG_LIST=$(echo "$JSON_TAGS" | jq -r '.[]')

          # 3) Iterate over each tag
          for TAG in $TAG_LIST; do
            echo "==== Building for tag '$TAG' ===="

            # Check out that specific tag
            git checkout "$TAG"

            # Install dependencies and build
            npm ci
            npm run package-linux

            # Zip up artifacts
            zip -r bin/todoist-wrapper-linux-x64.zip bin/todoist-wrapper-linux-x64/

            # Create a GitHub release for this tag (via gh CLI)
            gh release create "$TAG" ./bin/todoist-wrapper-linux-x64.zip \
              --notes "Automated release for $TAG" \
              --title "Release $TAG"
          done
