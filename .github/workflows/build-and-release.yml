name: Build and Release Latest Tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # So we can see all tags

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      # Step to find the newest tag and check if a release exists
      - name: Find the newest "v*" tag
        id: find_latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 1) Find the commit SHA of the newest v* tag
          LATEST_TAG_SHA="$(git rev-list --tags='v*' --max-count=1)"
          if [ -z "$LATEST_TAG_SHA" ]; then
            echo "No v* tags found."
            echo "latest_tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 2) Convert that commit SHA to a tag name
          LATEST_TAG_NAME="$(git describe --tags "$LATEST_TAG_SHA")"
          echo "Found newest tag: $LATEST_TAG_NAME"

          # 3) Check if a release already exists for this tag
          #    GH CLI will automatically use GH_TOKEN from the environment
          RELEASE_EXISTS=$(gh release view "$LATEST_TAG_NAME" --json url --jq .url 2>/dev/null || true)
          if [ -n "$RELEASE_EXISTS" ]; then
            echo "A release already exists for $LATEST_TAG_NAME. Skipping..."
            echo "latest_tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # If no release found, store the tag in an output
          echo "latest_tag=$LATEST_TAG_NAME" >> "$GITHUB_OUTPUT"

      # Build and release step only runs if latest_tag != ''
      - name: Build and release
        if: ${{ steps.find_latest.outputs.latest_tag != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG='${{ steps.find_latest.outputs.latest_tag }}'
          echo "Building and releasing $LATEST_TAG..."

          git checkout "$LATEST_TAG"  # “Detached HEAD” is normal on a tag

          npm ci
          npm run package-linux

          zip -r bin/todoist-wrapper-linux-x64.zip bin/todoist-wrapper-linux-x64/

          # Again, GH CLI will use GH_TOKEN from the env automatically
          gh release create "$LATEST_TAG" bin/todoist-wrapper-linux-x64.zip \
            --notes "Automated release for $LATEST_TAG" \
            --title "Release $LATEST_TAG"
