name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC, for instance

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code (fetch all tags)
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # important for accessing all tags

      - name: Install GitHub CLI (if not already on runner)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Find unbuilt tags
        id: find_tags
        run: |
          # 1) Grab all tags that start with 'v'
          ALL_TAGS=$(git tag --list 'v*' | sort -r)
          UNBUILT_TAGS=""

          # 2) For each tag, check if there's already a release
          for TAG in $ALL_TAGS; do
            # Using GH CLI to see if a release exists for this tag
            RELEASE_EXISTS=$(gh release view "$TAG" --json url --jq .url 2>/dev/null || true)
            if [ -z "$RELEASE_EXISTS" ]; then
              UNBUILT_TAGS+="$TAG"$'\n'
            fi
          done

          # 3) Debug logging
          if [ -z "$UNBUILT_TAGS" ]; then
            echo "No unbuilt tags found."
          else
            echo "Unbuilt tags found:"
            echo "$UNBUILT_TAGS"
          fi

          # 4) Store multiline output safely via heredoc
          echo "unbuilt-tags<<EOF" >> $GITHUB_OUTPUT
          echo "$UNBUILT_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and release each unbuilt tag
        if: ${{ steps.find_tags.outputs.unbuilt-tags != '' }}
        run: |
          # 1) Read multiline output into array
          IFS=$'\n' read -rd '' -a TAG_ARRAY <<< "${{ steps.find_tags.outputs.unbuilt-tags }}"

          # 2) Iterate over each tag
          for TAG in "${TAG_ARRAY[@]}"; do
            # Trim potential whitespace or empty lines
            TAG=$(echo "$TAG" | xargs)
            [ -z "$TAG" ] && continue  # Skip if empty

            echo "==== Building for tag '$TAG' ===="

            # Check out that specific tag
            git checkout "$TAG"

            # Install and build
            npm ci
            npm run package-linux

            # Zip artifacts
            zip -r bin/todoist-wrapper-linux-x64.zip bin/todoist-wrapper-linux-x64/

            # Create GH release for this tag
            gh release create "$TAG" ./bin/todoist-wrapper-linux-x64.zip \
              --notes "Automated release for $TAG" \
              --title "Release $TAG"
          done
